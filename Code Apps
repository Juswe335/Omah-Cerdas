/*
   -- New project --
   
   This source code of graphical user interface 
   has been generated automatically by RemoteXY editor.
   To compile this code using RemoteXY library 3.1.10 or later version 
   download by link http://remotexy.com/en/library/
   To connect using RemoteXY mobile app by link http://remotexy.com/en/download/                   
     - for ANDROID 4.13.11 or later version;
     - for iOS 1.10.3 or later version;
    
   This source code is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.    
*/

//////////////////////////////////////////////
//        RemoteXY include library          //
//////////////////////////////////////////////

// you can enable debug logging to Serial at 115200
//#define REMOTEXY__DEBUGLOG    

// RemoteXY select connection mode and include library 
#define REMOTEXY_MODE__ESP8266WIFI_LIB_POINT

#include <ESP8266WiFi.h>

// RemoteXY connection settings 
#define REMOTEXY_WIFI_SSID "Najakk"
#define REMOTEXY_WIFI_PASSWORD "12345678"
#define REMOTEXY_SERVER_PORT 6377


#include <RemoteXY.h>
#include <DHT.h>


// RemoteXY GUI configuration  
#pragma pack(push, 1)  
uint8_t RemoteXY_CONF[] =   // 317 bytes
  { 255,4,0,15,0,55,1,17,0,0,0,31,2,106,200,108,200,2,1,0,
  5,0,130,245,254,153,207,245,254,156,207,0,8,129,10,27,51,10,5,24,
  61,12,16,72,101,108,108,111,32,84,104,101,114,101,0,129,10,38,67,9,
  5,40,89,12,16,87,101,108,99,111,109,101,32,72,111,109,101,33,0,129,
  18,100,66,9,10,102,88,12,16,76,101,116,39,115,32,71,101,116,32,83,
  116,97,114,116,101,100,0,131,39,117,28,28,33,117,42,42,0,31,1,8,
  62,0,6,10,0,130,249,253,132,214,249,253,134,214,0,126,131,245,5,22,
  12,250,5,41,14,6,126,126,31,0,9,129,29,4,46,8,30,4,46,8,
  8,79,109,97,104,32,67,101,114,100,105,107,0,68,0,130,107,52,0,130,
  109,52,49,8,36,83,111,105,108,32,77,111,105,115,116,117,114,101,0,67,
  14,111,40,10,14,111,41,10,4,2,26,11,129,14,104,61,6,15,104,46,
  6,8,82,111,111,109,32,84,101,109,112,101,114,97,116,117,114,101,32,40,
  67,41,0,2,6,48,44,22,6,48,45,22,0,2,26,31,31,79,78,0,
  79,70,70,0,6,60,36,40,40,62,36,40,40,8,16,129,35,24,37,7,
  36,24,37,7,8,83,109,97,114,116,32,76,105,103,104,116,0,129,34,91,
  34,6,35,91,37,6,8,83,109,97,114,116,32,72,111,109,101,0 };
  
// this structure defines all the variables and events of your control interface 
struct {

    // input variables
  uint8_t switch_01; // =1 if switch ON and =0 if OFF
  uint8_t rgb_01_r; // =0..255 Red color value
  uint8_t rgb_01_g; // =0..255 Green color value
  uint8_t rgb_01_b; // =0..255 Blue color value

    // output variables
  float onlineGraph_01_var1;
  char text_02[11]; // string UTF8 end zero

    // other variable
  uint8_t connect_flag;  // =1 if wire connected, else =0

} RemoteXY;   
#pragma pack(pop)
 
/////////////////////////////////////////////
//           END RemoteXY include          //
/////////////////////////////////////////////

#define PIN_SWITCH_01 12
#define PIN_RED 16
#define PIN_GREEN 4
#define PIN_BLUE 2
#define PIN_DHT 0
#define DHTYPE DHT11
DHT dht(PIN_DHT, DHTYPE);

int temp;
int hum;

void setup() 
{
  RemoteXY_Init (); 
  
   Serial.begin(9600);

  pinMode (PIN_SWITCH_01, OUTPUT);
  Serial.println("Pin 1 set!");

  pinMode (PIN_RED, OUTPUT);
  Serial.println("Pin 2 set!");

  pinMode (PIN_GREEN, OUTPUT);
  Serial.println("Pin 3 set!");

  pinMode (PIN_BLUE, OUTPUT);
  Serial.println("Pin 4 set!");
  // pinMode (7, OUTPUT);

  dht.begin();
  // TODO you setup code
  
}

// Global variables to manage timing
unsigned long lastSoilMoistureReadTime = 0;
const unsigned long soilMoistureReadInterval = 2000; // 5000 milliseconds = 5 seconds

void loop() 
{ 
  RemoteXY_Handler();

  float temp = dht.readTemperature();
  float hum = dht.readHumidity();

  if (isnan(temp) || isnan(hum)) {
    Serial.println("Failed to read from DHT sensor!");
  } else {
    Serial.print("Temp: ");
    Serial.println(temp);
    Serial.print("Humidity: ");
    Serial.println(hum);
  }
  //  float kelembapanTanah;
  //   int hasil = analogRead(Pin_Soil);
  //   kelembapanTanah = (100-((hasil/1023.00)*100));
    dtostrf(temp, 0 , 1, RemoteXY.text_02);
    RemoteXY.onlineGraph_01_var1 = temp;

  digitalWrite(PIN_SWITCH_01, (RemoteXY.switch_01==1)?LOW:HIGH);
  analogWrite(PIN_RED, map(RemoteXY.rgb_01_r, 0, 100, 0, 255));
  analogWrite(PIN_GREEN, map(RemoteXY.rgb_01_g, 0, 100, 0, 255));
  analogWrite(PIN_BLUE, map(RemoteXY.rgb_01_b, 0, 100, 0, 255));
}
